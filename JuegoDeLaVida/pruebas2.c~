// La función vivas(const struct casilla *t) cuentas las vecinas 
// vivas de la célula a la que apunta el puntero t, y devuelve
// dicho valor.

// La codificación se basa en:
//          X Y Z
//        A - - -
//        B - t -
//        C - - -

int vivas(const struct casilla *t)
{
// Guardamos la posición de t
  int B = t->x;
  int Y = t->y;
  // Definimos variables auxiliares;
  //  int A; int C; int X; int Z; int n;
  // Inicializamos variables haciendo el mundo redondo 10x10
  /* if (B == 0)
    { A = 9; C = 1; };
  else if (B == 9)
    { A = 8; C = 0; };
  else
    { A = B - 1; C = B + 1; };
    //
  if (Y == 0)
    { X = 9; Z = 1; };
  else if (Y == 9)
    { x = 8; Z = 0; };
  else
    { X = B - 1; Z = B + 1; };
    //
  if ( */

  const struct casilla *AX;
  const struct casilla *AY;
  const struct casilla *AZ;
  const struct casilla *BX;
  // BY = t
  const struct casilla *BZ;
  const struct casilla *CX;
  const struct casilla *CY;
  const struct casilla *CZ;

  if ( B == 0 and Y == 0)
    { BZ = ++p;
      p += 8;
      BX = p++;
      CY = p++;
      CZ = p++;
      p += 7;
      CX = p++;
      p += 70;
      AY = p++;
      AZ = p++;
      p += 7;
      AX = p; };
  else
    {};
  printf("%d\n", *AX + *AY + *AZ + *BX + *BZ + *CX + *CY + *CZ);
  return *AX + *AY + *AZ + *BX + *BZ + *CX + *CY + *CZ;
}
  
      
